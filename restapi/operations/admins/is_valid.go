// Code generated by go-swagger; DO NOT EDIT.

package admins

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// IsValidHandlerFunc turns a function with the right signature into a is valid handler
type IsValidHandlerFunc func(IsValidParams) middleware.Responder

// Handle executing the request and returning a response
func (fn IsValidHandlerFunc) Handle(params IsValidParams) middleware.Responder {
	return fn(params)
}

// IsValidHandler interface for that can handle valid is valid params
type IsValidHandler interface {
	Handle(IsValidParams) middleware.Responder
}

// NewIsValid creates a new http.Handler for the is valid operation
func NewIsValid(ctx *middleware.Context, handler IsValidHandler) *IsValid {
	return &IsValid{Context: ctx, Handler: handler}
}

/*
	IsValid swagger:route GET /card/validator/{id} admins service isValid

check valid card (exist&expires)

Check card status: if card.exists & card.Expires>now() & valid = true
*/
type IsValid struct {
	Context *middleware.Context
	Handler IsValidHandler
}

func (o *IsValid) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewIsValidParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
