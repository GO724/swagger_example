// Code generated by go-swagger; DO NOT EDIT.

package restapi

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
)

var (
	// SwaggerJSON embedded version of the swagger document used at generation time
	SwaggerJSON json.RawMessage
	// FlatSwaggerJSON embedded flattened version of the swagger document used at generation time
	FlatSwaggerJSON json.RawMessage
)

func init() {
	SwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Sample OpenAPI2.0 spec for demo microservice bcard:\nCheck valid paycard (exist \u0026 not expiried)\nCRUD Card, Person, Bank \u0026 check valid\n\n",
    "title": "bcard_microservice_api",
    "contact": {
      "email": "nba.linx@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "host": "virtserver.swaggerhub.com",
  "basePath": "/go9130416421/bcard/1.0.0",
  "paths": {
    "/banks": {
      "get": {
        "description": "By passing in the appropriate options, you can search for\nbanks in the system\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admins"
        ],
        "summary": "searches banks",
        "parameters": [
          {
            "type": "string",
            "description": "pass an optional search string for looking up bank",
            "name": "searchString",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "number of records to skip for pagination",
            "name": "skip",
            "in": "query"
          },
          {
            "maximum": 50,
            "type": "integer",
            "format": "int32",
            "description": "maximum number of records to return",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Bank"
              }
            }
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      },
      "post": {
        "description": "Adds new bank to the system",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admins"
        ],
        "summary": "adds an bank item",
        "operationId": "newBank",
        "parameters": [
          {
            "description": "bank to add",
            "name": "bank",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Bank"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "new bank created"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "409": {
            "description": "conflict - bank already exists"
          }
        }
      }
    },
    "/banks/{inn}": {
      "get": {
        "description": "Gets bank by bic",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admins"
        ],
        "summary": "get bank by bic",
        "operationId": "getBank",
        "parameters": [
          {
            "type": "integer",
            "description": "get bank by bic",
            "name": "inn",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "bank found"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "404": {
            "description": "bank not exists"
          }
        }
      },
      "delete": {
        "description": "Remove bank by bic",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admins"
        ],
        "summary": "remove bank by bic",
        "operationId": "delBank",
        "parameters": [
          {
            "type": "integer",
            "description": "bic to remove bank",
            "name": "inn",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "bank deleted"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "404": {
            "description": "bank not exists"
          },
          "409": {
            "description": "conflict - can't delete bank"
          }
        }
      }
    },
    "/card/validator/{id}": {
      "get": {
        "description": "Check card status: if card.exists \u0026 card.Expires\u003enow() \u0026 valid = true\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admins",
          "service"
        ],
        "summary": "check valid card (exist\u0026expires)",
        "operationId": "isValid",
        "parameters": [
          {
            "type": "integer",
            "description": "get card status",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "card is valid",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Card"
              }
            }
          },
          "400": {
            "description": "bad input parameter"
          },
          "412": {
            "description": "card is invalid"
          }
        }
      }
    },
    "/cards": {
      "get": {
        "description": "By passing in the appropriate options, you can search for\ncards in the system\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admins"
        ],
        "summary": "searches cards",
        "parameters": [
          {
            "type": "string",
            "description": "pass an optional search string for looking up card",
            "name": "searchString",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "number of records to skip for pagination",
            "name": "skip",
            "in": "query"
          },
          {
            "maximum": 50,
            "type": "integer",
            "format": "int32",
            "description": "maximum number of records to return",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Card"
              }
            }
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      },
      "post": {
        "description": "Adds new card to the system",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admins"
        ],
        "summary": "adds new card item",
        "operationId": "addCard",
        "parameters": [
          {
            "description": "card to add",
            "name": "card",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Card"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "card created"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "409": {
            "description": "conflict - card already exists"
          }
        }
      }
    },
    "/cards/{inn}": {
      "get": {
        "description": "Get card by id",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admins"
        ],
        "summary": "get card by id",
        "operationId": "getCard",
        "parameters": [
          {
            "type": "integer",
            "description": "get card by id",
            "name": "inn",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "card found"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "404": {
            "description": "card not exists"
          }
        }
      },
      "delete": {
        "description": "Remove an card from the system",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admins"
        ],
        "summary": "remove an card item",
        "operationId": "del–°ard",
        "parameters": [
          {
            "type": "integer",
            "description": "card to remove",
            "name": "inn",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "card deleted"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "404": {
            "description": "card not exists"
          },
          "409": {
            "description": "conflict - can't delete card"
          }
        }
      }
    },
    "/persons": {
      "get": {
        "description": "By passing in the appropriate options, you can search for\npersons in the system\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admins"
        ],
        "summary": "searches persons",
        "parameters": [
          {
            "type": "string",
            "description": "pass an optional search string for looking up person",
            "name": "searchString",
            "in": "query"
          },
          {
            "type": "integer",
            "format": "int32",
            "description": "number of records to skip for pagination",
            "name": "skip",
            "in": "query"
          },
          {
            "maximum": 50,
            "type": "integer",
            "format": "int32",
            "description": "maximum number of records to return",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Person"
              }
            }
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      },
      "post": {
        "description": "Adds new person to the system",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admins"
        ],
        "summary": "adds new person item",
        "operationId": "newPerson",
        "parameters": [
          {
            "description": "inn\u0026name to add person",
            "name": "Person",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "person created"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "409": {
            "description": "conflict - person already exists"
          }
        }
      }
    },
    "/persons/{inn}": {
      "get": {
        "description": "Gets person by inn",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admins"
        ],
        "summary": "get person by inn",
        "operationId": "getPerson",
        "parameters": [
          {
            "type": "integer",
            "description": "inn to get person",
            "name": "inn",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "person found"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "404": {
            "description": "person not exists"
          }
        }
      },
      "delete": {
        "description": "Remove person by inn",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admins"
        ],
        "summary": "remove person by inn",
        "operationId": "delPerson",
        "parameters": [
          {
            "type": "integer",
            "description": "inn to remove person",
            "name": "inn",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "person deleted"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "404": {
            "description": "person not exists"
          },
          "409": {
            "description": "conflict - can't delete person"
          }
        }
      }
    }
  },
  "definitions": {
    "Bank": {
      "description": "Sample bank model",
      "type": "object",
      "required": [
        "bic",
        "name"
      ],
      "properties": {
        "bic": {
          "type": "integer",
          "format": "uint32",
          "example": 123456789
        },
        "name": {
          "type": "string",
          "example": "Bank of Albania"
        }
      }
    },
    "Card": {
      "description": "Sample card model",
      "type": "object",
      "required": [
        "id",
        "bic",
        "name",
        "expires"
      ],
      "properties": {
        "bic": {
          "type": "integer",
          "format": "uint32",
          "example": 123456789
        },
        "expires": {
          "type": "string",
          "format": "date-time",
          "example": "2016-08-29T09:12:33.001Z"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "example": 1234123412341234
        },
        "name": {
          "type": "string",
          "example": "Bank of Albania"
        }
      }
    },
    "Person": {
      "description": "Sample person model",
      "type": "object",
      "required": [
        "inn",
        "name"
      ],
      "properties": {
        "inn": {
          "type": "integer",
          "format": "uint64",
          "example": 123456789012
        },
        "name": {
          "type": "string",
          "example": "John Smith"
        }
      }
    }
  },
  "tags": [
    {
      "description": "Secured Admin-only calls",
      "name": "admins"
    },
    {
      "description": "Service data access",
      "name": "service"
    }
  ]
}`))
	FlatSwaggerJSON = json.RawMessage([]byte(`{
  "schemes": [
    "https"
  ],
  "swagger": "2.0",
  "info": {
    "description": "Sample OpenAPI2.0 spec for demo microservice bcard:\nCheck valid paycard (exist \u0026 not expiried)\nCRUD Card, Person, Bank \u0026 check valid\n\n",
    "title": "bcard_microservice_api",
    "contact": {
      "email": "nba.linx@gmail.com"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "version": "1.0.0"
  },
  "host": "virtserver.swaggerhub.com",
  "basePath": "/go9130416421/bcard/1.0.0",
  "paths": {
    "/banks": {
      "get": {
        "description": "By passing in the appropriate options, you can search for\nbanks in the system\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admins"
        ],
        "summary": "searches banks",
        "parameters": [
          {
            "type": "string",
            "description": "pass an optional search string for looking up bank",
            "name": "searchString",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "description": "number of records to skip for pagination",
            "name": "skip",
            "in": "query"
          },
          {
            "maximum": 50,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "description": "maximum number of records to return",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Bank"
              }
            }
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      },
      "post": {
        "description": "Adds new bank to the system",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admins"
        ],
        "summary": "adds an bank item",
        "operationId": "newBank",
        "parameters": [
          {
            "description": "bank to add",
            "name": "bank",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Bank"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "new bank created"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "409": {
            "description": "conflict - bank already exists"
          }
        }
      }
    },
    "/banks/{inn}": {
      "get": {
        "description": "Gets bank by bic",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admins"
        ],
        "summary": "get bank by bic",
        "operationId": "getBank",
        "parameters": [
          {
            "type": "integer",
            "description": "get bank by bic",
            "name": "inn",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "bank found"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "404": {
            "description": "bank not exists"
          }
        }
      },
      "delete": {
        "description": "Remove bank by bic",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admins"
        ],
        "summary": "remove bank by bic",
        "operationId": "delBank",
        "parameters": [
          {
            "type": "integer",
            "description": "bic to remove bank",
            "name": "inn",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "bank deleted"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "404": {
            "description": "bank not exists"
          },
          "409": {
            "description": "conflict - can't delete bank"
          }
        }
      }
    },
    "/card/validator/{id}": {
      "get": {
        "description": "Check card status: if card.exists \u0026 card.Expires\u003enow() \u0026 valid = true\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admins",
          "service"
        ],
        "summary": "check valid card (exist\u0026expires)",
        "operationId": "isValid",
        "parameters": [
          {
            "type": "integer",
            "description": "get card status",
            "name": "id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "card is valid",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Card"
              }
            }
          },
          "400": {
            "description": "bad input parameter"
          },
          "412": {
            "description": "card is invalid"
          }
        }
      }
    },
    "/cards": {
      "get": {
        "description": "By passing in the appropriate options, you can search for\ncards in the system\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admins"
        ],
        "summary": "searches cards",
        "parameters": [
          {
            "type": "string",
            "description": "pass an optional search string for looking up card",
            "name": "searchString",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "description": "number of records to skip for pagination",
            "name": "skip",
            "in": "query"
          },
          {
            "maximum": 50,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "description": "maximum number of records to return",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Card"
              }
            }
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      },
      "post": {
        "description": "Adds new card to the system",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admins"
        ],
        "summary": "adds new card item",
        "operationId": "addCard",
        "parameters": [
          {
            "description": "card to add",
            "name": "card",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Card"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "card created"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "409": {
            "description": "conflict - card already exists"
          }
        }
      }
    },
    "/cards/{inn}": {
      "get": {
        "description": "Get card by id",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admins"
        ],
        "summary": "get card by id",
        "operationId": "getCard",
        "parameters": [
          {
            "type": "integer",
            "description": "get card by id",
            "name": "inn",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "card found"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "404": {
            "description": "card not exists"
          }
        }
      },
      "delete": {
        "description": "Remove an card from the system",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admins"
        ],
        "summary": "remove an card item",
        "operationId": "del–°ard",
        "parameters": [
          {
            "type": "integer",
            "description": "card to remove",
            "name": "inn",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "card deleted"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "404": {
            "description": "card not exists"
          },
          "409": {
            "description": "conflict - can't delete card"
          }
        }
      }
    },
    "/persons": {
      "get": {
        "description": "By passing in the appropriate options, you can search for\npersons in the system\n",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admins"
        ],
        "summary": "searches persons",
        "parameters": [
          {
            "type": "string",
            "description": "pass an optional search string for looking up person",
            "name": "searchString",
            "in": "query"
          },
          {
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "description": "number of records to skip for pagination",
            "name": "skip",
            "in": "query"
          },
          {
            "maximum": 50,
            "minimum": 0,
            "type": "integer",
            "format": "int32",
            "description": "maximum number of records to return",
            "name": "limit",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "search results matching criteria",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Person"
              }
            }
          },
          "400": {
            "description": "bad input parameter"
          }
        }
      },
      "post": {
        "description": "Adds new person to the system",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "tags": [
          "admins"
        ],
        "summary": "adds new person item",
        "operationId": "newPerson",
        "parameters": [
          {
            "description": "inn\u0026name to add person",
            "name": "Person",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/Person"
            }
          }
        ],
        "responses": {
          "201": {
            "description": "person created"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "409": {
            "description": "conflict - person already exists"
          }
        }
      }
    },
    "/persons/{inn}": {
      "get": {
        "description": "Gets person by inn",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admins"
        ],
        "summary": "get person by inn",
        "operationId": "getPerson",
        "parameters": [
          {
            "type": "integer",
            "description": "inn to get person",
            "name": "inn",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "person found"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "404": {
            "description": "person not exists"
          }
        }
      },
      "delete": {
        "description": "Remove person by inn",
        "produces": [
          "application/json"
        ],
        "tags": [
          "admins"
        ],
        "summary": "remove person by inn",
        "operationId": "delPerson",
        "parameters": [
          {
            "type": "integer",
            "description": "inn to remove person",
            "name": "inn",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "person deleted"
          },
          "400": {
            "description": "invalid input, object invalid"
          },
          "404": {
            "description": "person not exists"
          },
          "409": {
            "description": "conflict - can't delete person"
          }
        }
      }
    }
  },
  "definitions": {
    "Bank": {
      "description": "Sample bank model",
      "type": "object",
      "required": [
        "bic",
        "name"
      ],
      "properties": {
        "bic": {
          "type": "integer",
          "format": "uint32",
          "example": 123456789
        },
        "name": {
          "type": "string",
          "example": "Bank of Albania"
        }
      }
    },
    "Card": {
      "description": "Sample card model",
      "type": "object",
      "required": [
        "id",
        "bic",
        "name",
        "expires"
      ],
      "properties": {
        "bic": {
          "type": "integer",
          "format": "uint32",
          "example": 123456789
        },
        "expires": {
          "type": "string",
          "format": "date-time",
          "example": "2016-08-29T09:12:33.001Z"
        },
        "id": {
          "type": "integer",
          "format": "uint64",
          "example": 1234123412341234
        },
        "name": {
          "type": "string",
          "example": "Bank of Albania"
        }
      }
    },
    "Person": {
      "description": "Sample person model",
      "type": "object",
      "required": [
        "inn",
        "name"
      ],
      "properties": {
        "inn": {
          "type": "integer",
          "format": "uint64",
          "example": 123456789012
        },
        "name": {
          "type": "string",
          "example": "John Smith"
        }
      }
    }
  },
  "tags": [
    {
      "description": "Secured Admin-only calls",
      "name": "admins"
    },
    {
      "description": "Service data access",
      "name": "service"
    }
  ]
}`))
}
